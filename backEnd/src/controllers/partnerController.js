import partnerService from '../services/partnerService.js';
import { validateRequest } from '../utils/validator.js';

// Qu·∫£n l√Ω kh√°ch s·∫°n
export const getHotels = async (req, res) => {
  try {
    const hotels = await partnerService.getHotels(req.user._id);
    res.json({
      success: true,
      data: hotels
    });
  } catch (error) {
    console.error('üö® Error in getHotels:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch kh√°ch s·∫°n'
    });
  }
};

export const createHotel = async (req, res) => {
  try {

    const hotel = await partnerService.createHotel(req.user._id, req.body);

    return res.status(201).json({
      success: true,
      message: 'T·∫°o kh√°ch s·∫°n th√†nh c√¥ng, ƒëang ch·ªù duy·ªát',
      data: hotel
    });
  } catch (error) {
    console.error('üö® Error in createHotel:', error);
    return res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o kh√°ch s·∫°n m·ªõi'
    });
  }
};


export const updateHotel = async (req, res) => {
  try {
    const { hotelId } = req.params;
    const updateData = req.body;

    // 1. Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!hotelId) {
      console.error('‚ùå Thi·∫øu hotelId');
      return res.status(400).json({
        success: false,
        message: 'M√£ kh√°ch s·∫°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      });
    }

    // 2. Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    const requiredFields = ['title', 'subtitle', 'cityId'];
    const missingFields = requiredFields.filter(field => !updateData[field]);
    
    if (missingFields.length > 0) {
      console.error('‚ùå Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc:', missingFields);
      return res.status(400).json({
        success: false,
        message: `Thi·∫øu c√°c tr∆∞·ªùng b·∫Øt bu·ªôc: ${missingFields.join(', ')}`
      });
    }

    // 3. Validate d·ªØ li·ªáu
    if (updateData.ratings && (updateData.ratings < 0 || updateData.ratings > 5)) {
      console.error('‚ùå ƒê√°nh gi√° kh√¥ng h·ª£p l·ªá');
      return res.status(400).json({
        success: false,
        message: 'ƒê√°nh gi√° ph·∫£i t·ª´ 0 ƒë·∫øn 5'
      });
    }

    if (updateData.benefits && !Array.isArray(updateData.benefits)) {
      console.error('‚ùå Benefits ph·∫£i l√† m·∫£ng');
      return res.status(400).json({
        success: false,
        message: 'Benefits ph·∫£i l√† m·∫£ng'
      });
    }

    if (updateData.imageUrls && !Array.isArray(updateData.imageUrls)) {
      console.error('‚ùå imageUrls ph·∫£i l√† m·∫£ng');
      return res.status(400).json({
        success: false,
        message: 'imageUrls ph·∫£i l√† m·∫£ng'
      });
    }

    // 4. G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t
    const updatedHotel = await partnerService.updateHotel(req.user._id, hotelId, updateData);
    return res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t kh√°ch s·∫°n th√†nh c√¥ng',
      data: updatedHotel
    });

  } catch (error) {
    console.error('‚ùå L·ªói trong updateHotel:', {
      name: error.name,
      message: error.message,
      stack: error.stack
    });

    if (error.name === 'CastError') {
      return res.status(400).json({
        success: false,
        message: 'M√£ kh√°ch s·∫°n kh√¥ng h·ª£p l·ªá'
      });
    }

    if (error.name === 'ValidationError') {
      return res.status(400).json({
        success: false,
        message: error.message
      });
    }

    return res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t kh√°ch s·∫°n'
    });
  }
};

export const deleteHotel = async (req, res) => {
  try {
    await partnerService.deleteHotel(
      req.user._id,
      req.params.hotelId
    );

    res.json({
      success: true,
      message: 'X√≥a kh√°ch s·∫°n th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('üö® Error in deleteHotel:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi x√≥a kh√°ch s·∫°n'
    });
  }
};

export const getHotelDetails = async (req, res) => {
  try {
    const hotel = await partnerService.getHotelDetails(
      req.user._id,
      req.params.hotelId
    );

    if (!hotel) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y kh√°ch s·∫°n'
      });
    }

    res.json({
      success: true,
      data: hotel
    });
  } catch (error) {
    console.error('üö® Error in getHotelDetails:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th√¥ng tin kh√°ch s·∫°n'
    });
  }
};

// Qu·∫£n l√Ω ph√≤ng
export const getRooms = async (req, res) => {
  try {
    const rooms = await partnerService.getRooms(
      req.user._id,
      req.params.hotelId
    );
    res.json({
      success: true,
      data: rooms
    });
  } catch (error) {
    console.error('üö® Error in getRooms:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch ph√≤ng'
    });
  }
};


export const createRoom = async (req, res) => {
  try {
    console.log('üöÄ Controller: B·∫Øt ƒë·∫ßu t·∫°o ph√≤ng m·ªõi:', {
      hotelId: req.params.hotelId,
      roomData: req.body
    });

    // // 1. Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    // const validation = validateRequest(req.body, {
    //   roomType: 'required|string',
    //   description: 'required|string',
    //   pricePerNight: 'required|numeric|min:0',
    //   maxOccupancy: 'required|numeric|min:1',
    //   bedType: 'required|string',
    //   amenities: 'required|array',
    //   totalRooms: 'required|numeric|min:1',
    //   availableRooms: 'required|numeric|min:0',
    //   imageUrls: 'array',
    //   isActive: 'boolean',
    //   'discount.percentage': 'numeric|min:0|max:100'
    // });

    // if (!validation.success) {
    //   console.error('‚ùå Validation error:', validation);
    //   return res.status(400).json(validation);
    // }

    // 2. G·ªçi service ƒë·ªÉ t·∫°o ph√≤ng
    const room = await partnerService.createRoom(
      req.user._id,
      req.params.hotelId,
      req.body
    );

    // console.log('‚úÖ Controller: T·∫°o ph√≤ng th√†nh c√¥ng:', {
    //   roomId: room._id,
    //   hotelId: room.hotelId
    // });

    return res.status(201).json({
      success: true,
      message: 'T·∫°o ph√≤ng th√†nh c√¥ng',
      data: room
    });

  } catch (error) {
    console.error('‚ùå Controller: L·ªói trong createRoom:', {
      name: error.name,
      message: error.message,
      stack: error.stack
    });

    return res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o ph√≤ng m·ªõi'
    });
  }
};

export const updateRoom = async (req, res) => {
  try {
    console.log('üöÄ Controller: B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t ph√≤ng:', {
      roomId: req.params.roomId,
      updateData: req.body
    });

    // // 1. Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    // const validation = validateRequest(req.body, {
    //   roomType: 'string',
    //   description: 'string',
    //   pricePerNight: 'numeric|min:0',
    //   maxOccupancy: 'numeric|min:1',
    //   bedType: 'string',
    //   amenities: 'array',
    //   totalRooms: 'numeric|min:1',
    //   availableRooms: 'numeric|min:0',
    //   imageUrls: 'array',
    //   isActive: 'boolean',
    //   'discount.percentage': 'numeric|min:0|max:100'
    // });

    // if (!validation.success) {
    //   console.error('‚ùå Validation error:', validation);
    //   return res.status(400).json(validation);
    // }

    // 2. G·ªçi service ƒë·ªÉ c·∫≠p nh·∫≠t ph√≤ng
    const room = await partnerService.updateRoom(
      req.user._id,
      req.params.roomId,
      req.body
    );

    console.log('‚úÖ Controller: C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng:', {
      roomId: room._id,
      hotelId: room.hotelId
    });

    return res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng',
      data: room
    });

  } catch (error) {
    console.error('‚ùå Controller: L·ªói trong updateRoom:', {
      name: error.name,
      message: error.message,
      stack: error.stack
    });

    return res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t ph√≤ng'
    });
  }
};

export const deleteRoom = async (req, res) => {
  try {
    // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu v√† x√≥a ph√≤ng
    await partnerService.deleteRoom(
      req.user._id,
      req.params.roomId
    );

    res.json({
      success: true,
      message: 'X√≥a ph√≤ng th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('üö® Error in deleteRoom:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi x√≥a ph√≤ng'
    });
  }
};

// Qu·∫£n l√Ω khuy·∫øn m√£i
export const getDiscounts = async (req, res) => {
  try {
    const discounts = await partnerService.getDiscounts(req.user._id);
    res.json({
      success: true,
      data: discounts
    });
  } catch (error) {
    console.error('üö® Error in getDiscounts:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch khuy·∫øn m√£i'
    });
  }
};

export const createDiscount = async (req, res) => {
  try {
    const validation = validateRequest(req.body, {
      code: 'required|string|minLength:3|maxLength:20',
      name: 'required|string',
      description: 'required|string',
      discountType: 'required|in:percentage,fixed',
      discountValue: 'required|numeric|min:0',
      minOrderValue: 'numeric|min:0',
      maxDiscountValue: 'numeric|min:0',
      startDate: 'required|date',
      endDate: 'required|date',
      hotelId: 'required|string',
      usageLimit: 'numeric|min:1',
      status: 'in:active,inactive'
    });

    if (!validation.success) {
      return res.status(400).json(validation);
    }

    const discount = await partnerService.createDiscount(
      req.user._id,
      req.body
    );

    res.status(201).json({
      success: true,
      data: discount
    });
  } catch (error) {
    console.error('üö® Error in createDiscount:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi t·∫°o khuy·∫øn m√£i m·ªõi'
    });
  }
};

export const updateDiscount = async (req, res) => {
  try {
    const validation = validateRequest(req.body, {
      name: 'string',
      description: 'string',
      discountType: 'in:percentage,fixed',
      discountValue: 'numeric|min:0',
      minOrderValue: 'numeric|min:0',
      maxDiscountValue: 'numeric|min:0',
      startDate: 'date',
      endDate: 'date',
      usageLimit: 'numeric|min:1',
      status: 'in:active,inactive'
    });

    if (!validation.success) {
      return res.status(400).json(validation);
    }

    const discount = await partnerService.updateDiscount(
      req.user._id,
      req.params.discountId,
      req.body
    );

    res.json({
      success: true,
      data: discount
    });
  } catch (error) {
    console.error('üö® Error in updateDiscount:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi c·∫≠p nh·∫≠t khuy·∫øn m√£i'
    });
  }
};

export const deleteDiscount = async (req, res) => {
  try {
    await partnerService.deleteDiscount(
      req.user._id,
      req.params.discountId
    );

    res.json({
      success: true,
      message: 'X√≥a khuy·∫øn m√£i th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('üö® Error in deleteDiscount:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi x√≥a khuy·∫øn m√£i'
    });
  }
};

export const getDiscountDetails = async (req, res) => {
  try {
    const discount = await partnerService.getDiscountDetails(
      req.user._id,
      req.params.discountId
    );

    res.json({
      success: true,
      data: discount
    });
  } catch (error) {
    console.error('üö® Error in getDiscountDetails:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y th√¥ng tin khuy·∫øn m√£i'
    });
  }
};

// Qu·∫£n l√Ω t√†i kho·∫£n
export const getProfile = async (req, res) => {
  try {
    const profile = await partnerService.getProfile(req.user._id);
    res.json({
      success: true,
      data: profile
    });
  } catch (error) {
    console.error('üö® Error in getProfile:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th√¥ng tin profile'
    });
  }
};

export const updateProfile = async (req, res) => {
  try {
    const validation = validateRequest(req.body, {
      'profile.firstName': 'string',
      'profile.lastName': 'string',
      'profile.phone': 'string',
      'partnerInfo.companyName': 'string',
      'partnerInfo.taxCode': 'string',
      'partnerInfo.address': 'string'
    });

    if (!validation.success) {
      return res.status(400).json(validation);
    }

    const profile = await partnerService.updateProfile(
      req.user._id,
      req.body
    );

    res.json({
      success: true,
      data: profile
    });
  } catch (error) {
    console.error('üö® Error in updateProfile:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin profile'
    });
  }
};

// Th·ªëng k√™ v√† b√°o c√°o
export const getDashboardStats = async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    const stats = await partnerService.getDashboardStats(
      req.user._id,
      startDate,
      endDate
    );
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error('üö® Error in getDashboardStats:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th·ªëng k√™'
    });
  }
};

// ƒê·ªïi m·∫≠t kh·∫©u
export const changePassword = async (req, res) => {
  try {
    const validation = validateRequest(req.body, {
      currentPassword: 'required|string',
      newPassword: 'required|string|minLength:6',
      confirmPassword: 'required|string'
    });

    if (!validation.success) {
      return res.status(400).json(validation);
    }

    const { currentPassword, newPassword, confirmPassword } = req.body;

    // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u
    if (newPassword !== confirmPassword) {
      return res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp'
      });
    }

    // G·ªçi service ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u
    await partnerService.changePassword(
      req.user._id,
      currentPassword,
      newPassword
    );

    res.json({
      success: true,
      message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('üö® Error in changePassword:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u'
    });
  }
};

// L·∫•y b√°o c√°o ƒë·∫∑t ph√≤ng
export const getBookingReports = async (req, res) => {
  try {
    const { startDate, endDate, status } = req.query;
    const reports = await partnerService.getBookingReports(
      req.user._id,
      startDate,
      endDate,
      status
    );
    res.json({
      success: true,
      data: reports
    });
  } catch (error) {
    console.error('üö® Error in getBookingReports:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y b√°o c√°o ƒë·∫∑t ph√≤ng'
    });
  }
};

// L·∫•y b√°o c√°o doanh thu
export const getRevenueReports = async (req, res) => {
  try {
    const { startDate, endDate, groupBy } = req.query;
    const reports = await partnerService.getRevenueReports(
      req.user._id,
      startDate,
      endDate,
      groupBy
    );
    res.json({
      success: true,
      data: reports
    });
  } catch (error) {
    console.error('üö® Error in getRevenueReports:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y b√°o c√°o doanh thu'
    });
  }
};

// L·∫•y b√°o c√°o t·ª∑ l·ªá ƒë·∫∑t ph√≤ng
export const getOccupancyReports = async (req, res) => {
  try {
    const { startDate, endDate, hotelId } = req.query;
    const reports = await partnerService.getOccupancyReports(
      req.user._id,
      startDate,
      endDate,
      hotelId
    );
    res.json({
      success: true,
      data: reports
    });
  } catch (error) {
    console.error('üö® Error in getOccupancyReports:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y b√°o c√°o t·ª∑ l·ªá ƒë·∫∑t ph√≤ng'
    });
  }
};

// L·∫•y chi ti·∫øt ph√≤ng
export const getRoomDetails = async (req, res) => {
  try {
    const room = await partnerService.getRoomDetails(
      req.user._id,
      req.params.roomId
    );

    if (!room) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ph√≤ng'
      });
    }

    res.json({
      success: true,
      data: room
    });
  } catch (error) {
    console.error('üö® Error in getRoomDetails:', error);
    res.status(error.statusCode || 500).json({
      success: false,
      message: error.message || 'L·ªói khi l·∫•y th√¥ng tin ph√≤ng'
    });
  }
};
